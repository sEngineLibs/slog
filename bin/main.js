// Generated by Haxe 4.3.3
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var slog_Logger = function(name) {
	this.format = "%B({datetime}) :{name}: {message}";
	this.level = 0;
	this.name = name;
};
slog_Logger.__name__ = true;
var slog_Log = function() { };
slog_Log.__name__ = true;
var slog_LogLevel = {};
slog_LogLevel.eq = function(this1,b) {
	return this1 == b;
};
slog_LogLevel.neq = function(this1,b) {
	return this1 != b;
};
slog_LogLevel.lower = function(this1,b) {
	return this1 < b;
};
slog_LogLevel.lowerEq = function(this1,b) {
	return this1 <= b;
};
slog_LogLevel.greater = function(this1,b) {
	return this1 > b;
};
slog_LogLevel.greaterEq = function(this1,b) {
	return this1 >= b;
};
slog_LogLevel.toString = function(this1) {
	switch(this1) {
	case 0:
		return "DEBUG";
	case 1:
		return "INFO";
	case 2:
		return "WARNING";
	case 3:
		return "ERROR";
	case 4:
		return "FATAL";
	default:
		return Std.string(this1);
	}
};
var slog__$Log_PosInfo = {};
slog__$Log_PosInfo.toString = function(this1) {
	return "" + this1.fileName + ":" + this1.lineNumber;
};
var tests_Tests = function() { };
tests_Tests.__name__ = true;
tests_Tests.main = function() {
	var _this = slog_Log.root;
	var message = "%G(" + "a" + ")";
	var level = 0;
	if(level == null) {
		level = 0;
	}
	if(_this.level <= level) {
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h = Object.create(null);
		styleMap_h["R"] = "color: red;";
		styleMap_h["G"] = "color: green;";
		styleMap_h["Y"] = "color: goldenrod;";
		styleMap_h["O"] = "color: orange;";
		styleMap_h["B"] = "color: blue;";
		styleMap_h["W"] = "font-weight: bold;";
		var styles = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h,flags.charAt(i))) {
					_g.push(styleMap_h[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles.push(css);
			styles.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var output_msg = msg;
		var output_styles = styles;
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h1 = Object.create(null);
		styleMap_h1["R"] = "color: red;";
		styleMap_h1["G"] = "color: green;";
		styleMap_h1["Y"] = "color: goldenrod;";
		styleMap_h1["O"] = "color: orange;";
		styleMap_h1["B"] = "color: blue;";
		styleMap_h1["W"] = "font-weight: bold;";
		var styles1 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h1,flags.charAt(i))) {
					_g.push(styleMap_h1[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles1.push(css);
			styles1.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var out_msg = msg;
		var out_styles = styles1;
		console.log.apply(null,[out_msg].concat(out_styles));
	}
	var _this = slog_Log.root;
	var message = "%Y(" + "a" + ")";
	var level = 1;
	if(level == null) {
		level = 0;
	}
	if(_this.level <= level) {
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h2 = Object.create(null);
		styleMap_h2["R"] = "color: red;";
		styleMap_h2["G"] = "color: green;";
		styleMap_h2["Y"] = "color: goldenrod;";
		styleMap_h2["O"] = "color: orange;";
		styleMap_h2["B"] = "color: blue;";
		styleMap_h2["W"] = "font-weight: bold;";
		var styles2 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h2,flags.charAt(i))) {
					_g.push(styleMap_h2[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles2.push(css);
			styles2.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var output_msg = msg;
		var output_styles = styles2;
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h3 = Object.create(null);
		styleMap_h3["R"] = "color: red;";
		styleMap_h3["G"] = "color: green;";
		styleMap_h3["Y"] = "color: goldenrod;";
		styleMap_h3["O"] = "color: orange;";
		styleMap_h3["B"] = "color: blue;";
		styleMap_h3["W"] = "font-weight: bold;";
		var styles3 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h3,flags.charAt(i))) {
					_g.push(styleMap_h3[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles3.push(css);
			styles3.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var out_msg = msg;
		var out_styles = styles3;
		console.log.apply(null,[out_msg].concat(out_styles));
	}
	var _this = slog_Log.root;
	var message = "%O(" + "a" + ")";
	var level = 2;
	if(level == null) {
		level = 0;
	}
	if(_this.level <= level) {
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h4 = Object.create(null);
		styleMap_h4["R"] = "color: red;";
		styleMap_h4["G"] = "color: green;";
		styleMap_h4["Y"] = "color: goldenrod;";
		styleMap_h4["O"] = "color: orange;";
		styleMap_h4["B"] = "color: blue;";
		styleMap_h4["W"] = "font-weight: bold;";
		var styles4 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h4,flags.charAt(i))) {
					_g.push(styleMap_h4[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles4.push(css);
			styles4.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var output_msg = msg;
		var output_styles = styles4;
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h5 = Object.create(null);
		styleMap_h5["R"] = "color: red;";
		styleMap_h5["G"] = "color: green;";
		styleMap_h5["Y"] = "color: goldenrod;";
		styleMap_h5["O"] = "color: orange;";
		styleMap_h5["B"] = "color: blue;";
		styleMap_h5["W"] = "font-weight: bold;";
		var styles5 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h5,flags.charAt(i))) {
					_g.push(styleMap_h5[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles5.push(css);
			styles5.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var out_msg = msg;
		var out_styles = styles5;
		console.log.apply(null,[out_msg].concat(out_styles));
	}
	var _this = slog_Log.root;
	var message = "%R(" + "a" + ")";
	var level = 3;
	if(level == null) {
		level = 0;
	}
	if(_this.level <= level) {
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h6 = Object.create(null);
		styleMap_h6["R"] = "color: red;";
		styleMap_h6["G"] = "color: green;";
		styleMap_h6["Y"] = "color: goldenrod;";
		styleMap_h6["O"] = "color: orange;";
		styleMap_h6["B"] = "color: blue;";
		styleMap_h6["W"] = "font-weight: bold;";
		var styles6 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h6,flags.charAt(i))) {
					_g.push(styleMap_h6[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles6.push(css);
			styles6.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var output_msg = msg;
		var output_styles = styles6;
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h7 = Object.create(null);
		styleMap_h7["R"] = "color: red;";
		styleMap_h7["G"] = "color: green;";
		styleMap_h7["Y"] = "color: goldenrod;";
		styleMap_h7["O"] = "color: orange;";
		styleMap_h7["B"] = "color: blue;";
		styleMap_h7["W"] = "font-weight: bold;";
		var styles7 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h7,flags.charAt(i))) {
					_g.push(styleMap_h7[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles7.push(css);
			styles7.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var out_msg = msg;
		var out_styles = styles7;
		console.log.apply(null,[out_msg].concat(out_styles));
	}
	var _this = slog_Log.root;
	var message = "%RW(" + "a" + ")";
	var level = 4;
	if(level == null) {
		level = 0;
	}
	if(_this.level <= level) {
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h8 = Object.create(null);
		styleMap_h8["R"] = "color: red;";
		styleMap_h8["G"] = "color: green;";
		styleMap_h8["Y"] = "color: goldenrod;";
		styleMap_h8["O"] = "color: orange;";
		styleMap_h8["B"] = "color: blue;";
		styleMap_h8["W"] = "font-weight: bold;";
		var styles8 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h8,flags.charAt(i))) {
					_g.push(styleMap_h8[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles8.push(css);
			styles8.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var output_msg = msg;
		var output_styles = styles8;
		var value = _this.format;
		var values = DateTools.format(new Date(),"%H:%M:%S");
		var values1;
		switch(level) {
		case 0:
			values1 = "DEBUG";
			break;
		case 1:
			values1 = "INFO";
			break;
		case 2:
			values1 = "WARNING";
			break;
		case 3:
			values1 = "ERROR";
			break;
		case 4:
			values1 = "FATAL";
			break;
		default:
			values1 = Std.string(level);
		}
		var values2 = { datetime : values, level : values1, name : _this.name, message : message};
		var _g = 0;
		var _g1 = Reflect.fields(values2);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			value = StringTools.replace(value,"{" + f + "}",Std.string(Reflect.field(values2,f)));
		}
		var original = value;
		var regex = new EReg("%([RGBOYW]+)\\(([^\\)]*)\\)","g");
		var styleMap_h9 = Object.create(null);
		styleMap_h9["R"] = "color: red;";
		styleMap_h9["G"] = "color: green;";
		styleMap_h9["Y"] = "color: goldenrod;";
		styleMap_h9["O"] = "color: orange;";
		styleMap_h9["B"] = "color: blue;";
		styleMap_h9["W"] = "font-weight: bold;";
		var styles9 = [];
		var msg = regex.map(original,function(re) {
			var flags = re.matched(1);
			var _g = [];
			var _g1 = 0;
			var _g2 = flags.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(Object.prototype.hasOwnProperty.call(styleMap_h9,flags.charAt(i))) {
					_g.push(styleMap_h9[flags.charAt(i)]);
				}
			}
			var css = _g.join("");
			styles9.push(css);
			styles9.push("");
			return "%c" + re.matched(2) + "%c";
		});
		var out_msg = msg;
		var out_styles = styles9;
		console.log.apply(null,[out_msg].concat(out_styles));
	}
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
slog_Log.root = new slog_Logger("root");
slog_LogLevel.DEBUG = 0;
slog_LogLevel.INFO = 1;
slog_LogLevel.WARNING = 2;
slog_LogLevel.ERROR = 3;
slog_LogLevel.FATAL = 4;
tests_Tests.main();
})({});
